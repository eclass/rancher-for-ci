#!/usr/bin/env node
'use strict'

const Rancher = require('../index')
const pkg = require('../package')

process.on('unhandledRejection', (reason, promise) => {
  console.log({ event: 'UnhandledPromiseRejection', promise, reason })
  process.exit(1)
})

const flags = {
  values: process.argv.slice(2),
  has (flag) {
    return this.values.includes(flag)
  }
}

const args = {
  service: {
    name: 'service',
    required: true,
    description: 'service name to be upgraded',
    usage: '[stack-name/]service-name',
    value: {
      vars: [ 'PLUGIN_SERVICE' ]
    }
  },
  version: {
    name: 'version',
    required: true,
    description: 'version to which you want to upgrade your service',
    usage: '1.0.0',
    value: {
      vars: [ 'VERSION', 'PLUGIN_VERSION', 'DRONE_TAG', 'CI_TAG', 'DRONE_COMMIT_REF' ],
      transform: (str) => str.replace(/^refs\/tags\//, '')
    }
  },
  versionPrefix: {
    name: 'version_prefix',
    required: false,
    description: 'remove version prefix (e.g.: if set to "v", then a version "v1.0.0" will become "1.0.0")',
    usage: 'v',
    value: {
      vars: [ 'PLUGIN_VERSION_PREFIX' ]
    }
  },
  rancherUrl: {
    name: 'endpoint',
    required: true,
    description: 'rancher api url for the environment you wish to upgrade',
    usage: 'https://rancher.domain.com/v1/projects/{ID}',
    value: {
      vars: [ 'PLUGIN_ENDPOINT', 'RANCHER_URL' ]
    }
  },
  rancherAccessKey: {
    name: 'access_key',
    required: true,
    description: 'access key for the given rancher api environment',
    usage: 'FF4D832E2045B894577C',
    value: {
      vars: [ 'PLUGIN_ACCESS_KEY', 'RANCHER_ACCESS_KEY' ]
    }
  },
  rancherSecretKey: {
    name: 'secret_key',
    required: true,
    description: 'secret key for the given rancher api environment',
    usage: 'XhwN2HCvYppbQQqgXNurmZLrrjGHhg81s2yETMCi',
    value: {
      vars: [ 'PLUGIN_SECRET_KEY', 'RANCHER_SECRET_KEY' ]
    }
  },
  get (name) {
    const { description, required, usage, value } = this[name]
    const resolvedValue =
      value.vars.map(v => process.env[v] || process.env[v.toLowerCase()])
                .filter(v => !!v)
                .shift() || value.default

    if (!resolvedValue && required) {
      console.error(`argument "${name}" is missing`)
      console.error(`    description: ${description}`)
      console.error(`    usage: ${usage}`)
      console.error(`    env vars: ${value.vars.join(', ')}`)
      process.exit(1)
    }

    return (resolvedValue && value.transform)
      ? value.transform(resolvedValue)
      : resolvedValue
  }
}

const client = new Rancher(
  args.get('rancherUrl'),
  args.get('rancherAccessKey'),
  args.get('rancherSecretKey')
)

;(async () => {
  console.log(`Running rancher-for-ci v${pkg.version}`)

  const service = args.get('service')
  const versionPrefix = args.get('versionPrefix')
  const version = versionPrefix
    ? args.get('version').replace(new RegExp(`^${versionPrefix}`), '')
    : args.get('version')


  console.log('Upgrading service', service, 'to version', (versionPrefix ? `[${versionPrefix}]` : '') + version, '...')

  try {
    if (!flags.has('--dry-run')) {
      await client.upgrade(service, version)
    }
  } catch (err) {
    console.error('Something went wrong')
    console.error('    error:', err.message)
    console.error('    error:', err.stack)
    process.exit(1)
  }

  console.log(`Upgrade request has been accepted`)
  process.exit(0)
})()
